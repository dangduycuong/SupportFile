====How to remove all the spaces and \n\r in a String?
let text = "This \n is a st\tri\rng"
let test = String(text.filter { !" \n\t\r".contains($0) })

- lấy đường dẫn file (sử dụng RealmSwift)
	print("Duong dan file: \(Realm.Configuration.defaultConfiguration.fileURL)")

- lấy full link trong alamofire

extension Request {
    public func debugLog() -> Self {
        #if DEBUG
            debugPrint("====")
            debugPrint(self)
            debugPrint("====")
        #endif
        return self
    }
}

// gọi ra

  Alamofire.request(url).debugLog()
            .responseJSON( completionHandler: { response in
   })
====limited char in textview
//MARK:- TextView Delegate
func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
    //300 chars restriction
    return textView.text.count + (text.count - range.length) <= 300
}

- Remove ký tự bất kỳ trong chuỗi String
        var phrase = """
		Any long charactor
	"""
        let vowels: Set<Character> = ["\\", "[", "]"]
        phrase.removeAll(where: { vowels.contains($0) })
- Action trong alert
	        let alert = UIAlertController(title: "Thông báo".language(), message: "Bạn chắc chắn xoá", preferredStyle: .alert)
                alert.addAction(UIAlertAction(title: "KHÔNG".language(), style: .default, handler: nil))
                
                alert.addAction(UIAlertAction(title: "CÓ".language(), style: .default, handler: { (alertAction) in
                    // do something
                }))
                self.present(alert, animated: true, completion: nil)


Downlload ảnh:
	import UIKit

extension UIImageView {
    func dowloadFromServer(url: URL, contentMode mode: UIView.ContentMode = .scaleAspectFit) {
        contentMode = mode
        URLSession.shared.dataTask(with: url) { data, response, error in
            guard
                let httpURLResponse = response as? HTTPURLResponse, httpURLResponse.statusCode == 200,
                let mimeType = response?.mimeType, mimeType.hasPrefix("image"),
                let data = data, error == nil,
                let image = UIImage(data: data)
                else { return }
            DispatchQueue.main.async() {
                self.image = image
            }
            }.resume()
    }
    
    func dowloadFromServer(link: String, contentMode mode: UIView.ContentMode = .scaleAspectFit) {
        guard let url = URL(string: link) else { return }
        dowloadFromServer(url: url, contentMode: mode)
    }
}

sử dụng: ảnh. dowloadFromServer(link: String)
	 ảnh. dowloadFromServer(url: URL)


// mở rộng để add param cho url
extension URL {

func appendingParams(_ queryItem: String, value: String?) -> URL {

guard var urlComponents = URLComponents(string: absoluteString) else { return absoluteURL }

// Create array of existing query items
var queryItems: [URLQueryItem] = urlComponents.queryItems ??  []

// Create query item
let queryItem = URLQueryItem(name: queryItem, value: value)

// Append the new query item in the existing query items array
queryItems.append(queryItem)

// Append updated query items array in the url component object
urlComponents.queryItems = queryItems

// Returns the url from new url components
return urlComponents.url!
}
}

sử dụng
let url = URL(string: "https://www.thecocktaildb.com/api/json/v1/1/search.php")
let finalURL = url?.appendingParams("s", value: s)

BaseRouter.shared.callAPI(url: finalURL!) { (data: BaseDataModel) in
self.drinks = data.drinks
self.tableView.reloadData()
}


KẺ ĐƯỜNG LINE CẠNH CỦA BUTTON
let bottomLine = UIView(frame: CGRect(x: 0, y: connectLinkSubButton.bounds.height, width: connectLinkSubButton.bounds.width, height: 1))
        bottomLine.backgroundColor = UIColor.red
        connectLinkSubButton.addSubview(bottomLine)


VỊ TRÍ CỦA IMAGE IN BUTTON
dropdownButton.imageEdgeInsets = UIEdgeInsets(top: 0, left: dropdownButton.bounds.width - (dropdownButton.titleLabel?.bounds.width ?? 0), bottom: 0, right: 0)
dropdownButton.titleLabel?.bounds.width là tiêu đề button

Vị trí của ảnh so với chữ tiêu đề trong button (bên phải)
dropdownButton.semanticContentAttribute = UIApplication.shared
        .userInterfaceLayoutDirection == .rightToLeft ? .forceLeftToRight : .forceRightToLeft

====
// Hàm lọc. Dùng cho search và lọc append
filtered = data.filter { word in
            word.lowercased().contains(searchText.lowercased())
        }
filerred là mảng kết quả. data là mảng nguồn. (lọc mảng data append vào mảng filtered)



====
Ẩn bàn phím textField khi nhập xong
    @IBOutlet var text: UITextField! {
      didSet {
       text.delegate = self
      }
}

func textFieldShouldReturn(_ textField: UITextField) -> Bool {
    textField.resignFirstResponder()
    return true
}

//TextView
trong viewDidload() 
        textView.delegate = self
    

    /* Updated for Swift 4 */
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if(text == "\n") {
            textView.resignFirstResponder()
            return false
        }
        return true
    }

    /* Older versions of Swift */
    func textView(textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool {
        if(text == "\n") {
            textView.resignFirstResponder()
            return false
        }
        return true
    }


====placeholder textview
// placeholder textview
        noteTextView.delegate = self
        placeholderLabel = UILabel()
        placeholderLabel.text = "Nhập ghi chú...".language()
        placeholderLabel.font = UIFont.italicSystemFont(ofSize: (noteTextView.font?.pointSize)!)
        placeholderLabel.sizeToFit()
        noteTextView.addSubview(placeholderLabel)
        placeholderLabel.frame.origin = CGPoint(x: 5, y: (noteTextView.font?.pointSize)! / 2)
        placeholderLabel.textColor = UIColor.lightGray
        placeholderLabel.isHidden = !noteTextView.text.isEmpty
    }
    
    //Ẩn textView
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if(text == "\n") {
            textView.resignFirstResponder()
            return false
        }
        return true
    }
    
    func textViewDidChange(_ textView: UITextView) {
        placeholderLabel.isHidden = !textView.text.isEmpty
    }

====
Click button bàn phím thực hiện action
UISearchBarDelegate {
    func updateSearchResultsForSearchController(searchController: UISearchController) {
        if searchController.searchBar.text?.count ?? 0 < 15 {
            
        }

    }

func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        view.endEditing(true)
    }

====
LỌC Tìm Kiếm:
Cách 1:
filteredArray = arrDicts.filter({word in
            word.lowercased().hasPrefix(keyword.lowercased())
        })

filteredArray là kết quả sau khi lọc mảng arrDicts với từ khoá là keyword

Cách 2:
func filtering() {
        resultArray = sourceArray.filter({ (laptop: String) in
            laptop.lowercased().contains(searchTextField.text!.lowercased())
        })
}

hàm này chạy để vừa search vừa hiển thị ra kết quả tìm kiếm
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
    }

====
Lưu ý khi thực hiện xong bài này. Nhập xong với lọc và vừa nhập vừa lọc ra kết quả. Action trong keyboard, textField...
    Ẩn bàn phím khi thực hiện action. Ẩn khi ấn ra ngoài.
link chi tiết: https://github.com/dangduycuong/MasterSearch

override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)

	// Ẩn bàn phím khi ấn ra bên ngoài
        let tapGestureReconizer = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        tapGestureReconizer.cancelsTouchesInView = false
        view.addGestureRecognizer(tapGestureReconizer)
    }
    
    @objc func dismissKeyboard() {
        view.endEditing(true)
    }


====
	//Giới hạn số ký tự nhập vào searchBar

    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if searchBar.text!.length() > 16 {
            var searchText = searchBar.text!
            let range = searchText.index(searchText.startIndex, offsetBy: 16)..<searchText.endIndex
            searchText.removeSubrange(range)
            searchBar.text = searchText
        }
    }





====Trim Space
    var trimSpace = "  Let's trim all the whitespace  "
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let trimmedString = trimSpace.trimmingCharacters(in: .whitespacesAndNewlines)
        print(trimmedString)

	//result: Let's trim all the whitespace
    }








====full màn hình khi chuyển màn trong iOS 13.2
    @IBAction func nextVCAction(_ sender: UIButton) {
        
//        present(vc!, animated: true, completion: nil)
//
//        let vc = UIViewController()
//        let vc = DetailVC()
        let vc = storyboard?.instantiateViewController(identifier: "DetailVC") as? DetailVC
        vc?.modalPresentationStyle = .fullScreen //or .overFullScreen for transparency
        self.present(vc!, animated: true, completion: nil)
    }



====LoadMore
func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        if self.stopLoadMore {
            return
        }
        let endScrolling = scrollView.contentOffset.y + scrollView.frame.size.height
        if endScrolling >= scrollView.contentSize.height - 30 && endScrolling <= scrollView.contentSize.height + 30 {
            self.pageIndex += 1
            self.getListCableLane(laneCode: self.searchTextField.text ?? "")
//            if self.isBTSStation {
//                self.getListCableLane(laneCode: self.searchTextField.text ?? "")
//            } else {
//
//            }
        }
    }
====Lấy toạ độ 4 góc của màn hình trong google map
    func mapView(_ mapView: GMSMapView, didChange position: GMSCameraPosition) {
        let projection = mapView.projection.visibleRegion()

        let topLeftCorner: CLLocationCoordinate2D = projection.farLeft
        let topRightCorner: CLLocationCoordinate2D = projection.farRight
        let bottomLeftCorner: CLLocationCoordinate2D = projection.nearLeft
        let bottomRightCorner: CLLocationCoordinate2D = projection.nearRight
        print("Toạ độ: ", topLeftCorner, topRightCorner, bottomLeftCorner, bottomRightCorner)
    }

====Vừa nhập vừa lọc trên textField
searchBarTextField.addTarget(self, action: #selector(searchRecords), for: .editingChanged)


====Action trên marker google map
func mapView(_ mapView: GMSMapView, didTap marker: GMSMarker) -> Bool {
	print("chạm vào marker", marker.title as Any)
        apiType = .findByMapFrame
        setValueParams()
        findByMapFrame(params: params)
        return true
}




====lấy index trên marker
mảng để marker: listStation
mảng để quản lý marker: var markers = [GMSMarker]()
trong func marker append marker vào markers:
    //Đánh dấu các nhà trạm trên map
    func loadListCritialPointsToMap() {
	markers.removeAll()
        for i in 0..<listStation.count {
            if let lat = listStation[i].latitude, let lng = listStation[i].longtitude {
                let marker = GMSMarker()
                marker.position = CLLocationCoordinate2D(latitude: lat, longitude: lng)
                marker.title = listStation[i].address
                marker.icon = GMSMarker.markerImage(with: UIColor.gray)
                
                markers.append(marker) //append marker to markers to manager
                
                marker.map = viewMap
            }
        }
    }

//Action when tapped in to marker (only marker). Get index of listStation
    func mapView(_ mapView: GMSMapView, didTap marker: GMSMarker) -> Bool {
        print("chạm vào marker", marker.title as Any)
        
        if let index = markers.index(of: marker) {
            let tappedStation = listStation[index]
            diaChiTextField.text = tappedStation.address
            chuTramTextField.text = tappedStation.houseOwnerName
            sdtChuTramTextField.text = tappedStation.houseOwnerPhone
        }
        
        popupView.isHidden = false
        
        apiType = .findByMapFrame
        setValueParams()
        findByMapFrame(params: params)
        return true
    }


====tỉ lệ layout trong code
extension NSLayoutConstraint {
    func constraintWithMultiplier(_ multiplier: CGFloat) -> NSLayoutConstraint {
        return NSLayoutConstraint(item: self.firstItem!, attribute: self.firstAttribute, relatedBy: self.relation, toItem: self.secondItem, attribute: self.secondAttribute, multiplier: multiplier, constant: self.constant)
    }
}

Usage:

let newConstraint = constraintToChange.constraintWithMultiplier(0.75)
view.removeConstraint(constraintToChange)
view.addConstraint(newConstraint)
view.layoutIfNeeded()
constraintToChange = newConstraint

====Sắp xếp theo alpha b
let names = ["A", "B", "C", "E", "D"]

func backward(_ s1: String, _ s2: String) -> Bool {
    return s1 < s2
}
var reversedNames = names.sorted(by: backward)

====Action textfield
    @IBAction func buttonSearch(_ sender: Any) {
	
    }

	func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        	self.buttonSearch(self)
        	return true
    	}

====show/hide keyboard by button
show:
textField.becomeFirstResponder()
hide:
textField.resignFirstResponder()


====delegate qua BaseTableViewCell
    @IBAction func tappedEditAddress(_ sender: UIButton) {
        diaChiView.isHidden = true
        addressTextField.becomeFirstResponder()
        if let delegate = self.delegate as? BTS360TongQuanCellDelegate {
            params["address"] = addressTextField.text
            params["houseOwnerName"] = houseOwnerNameTextField.text
            params["houseOwnerPhone"] = houseOwnerPhoneTextField.text
            delegate.isUpdate(isUpdate: true, params: params)
        }
    }

====Lấy toạ độ 4 góc màn hình khi vừa loadMap
var viewMap: GMSMapView?
let projection = viewMap?.projection.visibleRegion()
let topLeftCorner: CLLocationCoordinate2D = projection!.farLeft
        let topRightCorner: CLLocationCoordinate2D = projection!.farRight
        let bottomLeftCorner: CLLocationCoordinate2D = projection!.nearLeft
        let bootomRightCorner: CLLocationCoordinate2D = projection!.nearRight

====bo tròn 1 góc nào đó của uiview
extension UIView {

  func roundCorners(_ corners: CACornerMask, radius: CGFloat, borderColor: UIColor, borderWidth: CGFloat) {
      self.layer.maskedCorners = corners
      self.layer.cornerRadius = radius
      self.layer.borderWidth = borderWidth
      self.layer.borderColor = borderColor.cgColor

  }

}
sử dụng: self.yourView.roundCorners([.layerMaxXMaxYCorner, .layerMaxXMinYCorner], radius: 20.0, borderColor: UIColor.red, borderWidth: 1)
====
func mapView(_ mapView: GMSMapView, didChange position: GMSCameraPosition) {
    let latitude = mapView.camera.target.latitude
    let longitude = mapView.camera.target.longitude
    centerMapCoordinate = CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
    self.placeMarkerOnCenter(centerMapCoordinate:centerMapCoordinate)
}

Function to place a marker on center point

func placeMarkerOnCenter(centerMapCoordinate:CLLocationCoordinate2D) {
    let marker = GMSMarker()
    marker.position = centerMapCoordinate
    marker.map = self.mapView
}

====How to pass data from ViewController to a ViewController in a tab bar
override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    let barViewControllers = segue.destination as! UITabBarController
    let destinationViewController = barViewControllers.viewControllers?[0] as! FirstViewController
    destinationViewController.test = "Hello TabBar 1"

    // access the second tab bar
    let secondDes = barViewControllers.viewControllers?[1] as! SecondViewController
    secondDes.test = "Hello TabBar 2"
}

...	navi item1; 
tabbar
	navi item2;
	if let navigationVC = self.tabBarController?.viewControllers?[1] as? BaseNavigationController {
	if let vc = navigationVC.childViewControllers.first as? TraCuuHaTangNimsVC 	{
                    vc.apiType = .findPillarByUserLocation
                    vc.thongTinTraCuu = .cot
                    vc.fromTongHopNims = true
                    self.tabBarController?.selectedIndex = 1
                }
            }

//pass data when tap tabbar button
func tabBarController(_ tabBarController: UITabBarController, didSelect viewController: UIViewController) {
        guard let viewControllers = viewControllers else {
            return
        }
        
        if let item1 = viewControllers[0] as? ItemVC1, let item2 = viewControllers[1] as? ItemVC2 {
            item2.data = item1.item1TextView.text
        }
    }

====
3 màn:
màn 1: navigation controller
màn 2: viewcontroller
màn 3: viewcontroller

passdata from màn 3 về màn 2 khi ấn vào nút back button trên thanh navigation


Using UINavigationControllerDelegate:

class DetailsViewController: UIViewController, UINavigationControllerDelegate {
                                                        //     ^
    var data: [String] = []                             // Important!

    override func viewDidLoad() {
        super.viewDidLoad()

        navigationController?.delegate = self

        data = ["data has changed!"]
    }
}

Swift 2:

extension DetailsViewController: UINavigationControllerDelegate {
    func navigationController(navigationController: UINavigationController, willShowViewController viewController: UIViewController, animated: Bool) {
        if let controller = viewController as? ProgressTableViewController {
            controller.data = data    // Here you pass the data back to your original view controller
        }
    }
}

Swift 3:

extension DetailsViewController: UINavigationControllerDelegate {
    func navigationController(_ navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool) {
        (viewController as? ProgressTableViewController)?.data = data // Here you pass the to your original view controller
    }
}

swift 4
func navigationController(_ navigationController: UINavigationController, willShow viewController: UIViewController, animated: Bool) {
        (viewController as? TraCuuHaTangNimsVC)?.fromTongHopNims = false
    }


====
//MARK: Long Press
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        guard isSelectedButton == .truyen_dan && isLeftOptionSelected == false else { return }
        self.setupLongPressGesture()
    }
    
    func setupLongPressGesture() {
        let longPressGesture: UILongPressGestureRecognizer = UILongPressGestureRecognizer(target: self, action: #selector(self.handleLongPress))
            longPressGesture.minimumPressDuration = 0.8 //second press
            longPressGesture.delegate = self
            self.tableView.addGestureRecognizer(longPressGesture)
    }
    
    @objc func handleLongPress(_ gestureRecognizer: UILongPressGestureRecognizer) {
        if gestureRecognizer.state == .ended {
            let touchPoint = gestureRecognizer.location(in: self.tableView)
            let indexPath = tableView.indexPathForRow(at: touchPoint)
            self.indexPath = indexPath
//            self.oldTelFax = self.lstInfoTelForSub?[indexPath!.row].telFax ?? ""
            self.tableView.deselectRow(at: indexPath!, animated: true)
            let alert = UIAlertController(title: "Thông báo".language(), message: "Bạn muốn cập nhật loại ODF", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "KHÔNG".language(), style: .default, handler: nil))
            alert.addAction(UIAlertAction(title: "CÓ".language(), style: .default, handler: { (alertAction) in
                self.title = ""
                let vc = Storyboard.QuanLyHaTangNIMS.nimsCapNhatLoaiODFVC()
                self.navigationController?.pushViewController(vc, animated: true)
            }))
            self.present(alert, animated: true, completion: nil)
        }
    }







====action khi chạm vào polyline
polyline.isTappable = true

Whenever the polyline is tapped, the GMSMapViewDelegate method didTapOverlay is called

func mapView(_ mapView: GMSMapView, didTap overlay: GMSOverlay) {
        //Write your code here
    }



====vuốt sau đó dừng sẽ chạy vào func này:
// stoped scroll google map
    func mapView(_ mapView: GMSMapView, idleAt position: GMSCameraPosition) {
        if callByMapFrameDefault {
            callAPIWhenStopScrollMap()
        }
        switch fromVC {
        case .OtherVC:
            // chạy lần 1 để đổi giá trị. Không gọi api khi vừa vào màn này, gọi khi vuốt bản đồ.
            callByMapFrameDefault = true
        default:
            callAPIWhenStopScrollMap()
        }
    }










====
https://rapidapi.com/apidojo/api/hotels4
==== add params, header to url
let urlString = "https://api.newsapi.aylien.com/api/v1/stories"
let parameters = ["categories.confident": "true", "source.name" : "The New York Times", "cluster" : "false", "cluster.algorithm" : "lingo", "sort_by" : "published_at", "sort_direction" : "desc", "cursor" : "*", "per_page" : "10"]
let headers = ["X-AYLIEN-NewsAPI-Application-ID": "App-ID-Here", "X-AYLIEN-NewsAPI-Application-Key": "App-Key-Here"]

var urlComponents = URLComponents(string: urlString)

var queryItems = [URLQueryItem]()
for (key, value) in parameters {
    queryItems.append(URLQueryItem(name: key, value: value))
}

urlComponents?.queryItems = queryItems

var request = URLRequest(url: (urlComponents?.url)!)
request.httpMethod = "GET"

for (key, value) in headers {
    request.setValue(value, forHTTPHeaderField: key)
}

let task = URLSession.shared.dataTask(with: request) { (data, response, error) -> Void in
    print(response)
}
task.resume()

====
Chỉ đường google map sử dụng Alamofire
    let origin = "\(37.778483),\(-122.513960)"
    let destination = "\(37.706753),\(-122.418677)"
    let url = "https://maps.googleapis.com/maps/api/directions/json?origin=\(origin)&destination=\(destination)&mode=driving&key=[YOUR-API-KEY]"

    Alamofire.request(url).responseJSON { response in
        let json = JSON(data: response.data!)
        let routes = json["routes"].arrayValue

        for route in routes
        {
            let routeOverviewPolyline = route["overview_polyline"].dictionary
            let points = routeOverviewPolyline?["points"]?.stringValue
            let path = GMSPath.init(fromEncodedPath: points!)

            let polyline = GMSPolyline(path: path)
            polyline.strokeColor = .black
            polyline.strokeWidth = 10.0
            polyline.map = mapViewX

        }
    }

====
khi chỉnh sửa textField
func textFieldDidChangeSelection(_ textField: UITextField) {

}

====
Truyền một object bằng Notification
Điều kiện cần:
1 object: enum TraCuuHaTangNimsUpdate {
    case failre
    case success
}
 var isSuccessUpdate = TraCuuHaTangNimsUpdate.failre
Màn đăng ký:
var isSuccessUpdate = TraCuuHaTangNimsUpdate.failre
override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        NotificationCenter.default.addObserver(self,
        selector: #selector(checkSuccessUpdate),
        name: .updateODFSuccess,
        object: nil)
    }
//action khi nhận được thông báo
@objc func checkSuccessUpdate(notification: Notification) {
        isSuccessUpdate = notification.object as! TraCuuHaTangNimsUpdate
        print("I've been notified from update odf")
        guard isSuccessUpdate == .success else { return }
        guard apiType == .findListODFByStation else { return }
        pageIndex = 0
        listTransmissionODF.removeAll()
        setValueParams()
        findListODFByStation(params: params)
        tableView.reloadData()
    }

// Màn phát
var isSuccessUpdate = TraCuuHaTangNimsUpdate.failre

self.isSuccessUpdate = .success
NotificationCenter.default.post(name: .updateSuccess, object: self.isSuccessUpdate)
                        self.showNoticeMessage(message: message)

====Action in alert
func showAlertController(title: String, message: String, cancelTitle: String = VTLocalizedString.localized(key: "cancel").uppercased(), cancelAction: (() -> Void)?, okTitle: String = VTLocalizedString.localized(key: "OK").uppercased(), okAction: (() -> Void)?) {
        let alertController: UIAlertController = UIAlertController(title: title, message: message, preferredStyle: UIAlertControllerStyle.alert)
        alertController.addAction(UIAlertAction(title: cancelTitle.uppercased(), style: .default) { (cancelButton) in
            cancelAction?()
        })
        alertController.addAction(UIAlertAction(title: okTitle.uppercased(), style: .default) { (cancelButton) in
            okAction?()
        })
        self.present(alertController, animated: true, completion: nil)
    }


====cho bản đồ về giữa map
let latitude = marker.position.latitude
        let longitude = marker.position.longitude
        if isChangeCable {
            zoomMap = 17
        }
        let location = GMSCameraPosition.camera(withLatitude: latitude, longitude: longitude, zoom: Float(zoomMap))


viewMap?.camera = location
hoặc

Try doing this:
mapView.animate(to: location)
====Set multi action in 1 alert
func textFieldShouldClear(_ textField: UITextField) -> Bool {
        let backupText = masterTextField.text
        // Create the alert controller
        let alertController = UIAlertController(title: "Thông báo", message: "Bạn muốn xoá hết", preferredStyle: .alert)

        // Create the actions
        let okAction = UIAlertAction(title: "OK", style: UIAlertAction.Style.default) {
            UIAlertAction in
            self.masterTextField.text = ""
        }
        
        let cancelAction = UIAlertAction(title: "Cancel", style: UIAlertAction.Style.cancel) {
            UIAlertAction in
            self.masterTextField.text = backupText
        }
        
        let otherAction = UIAlertAction(title: "Xoá hết và dừng nhập", style: .destructive) {
            UIAlertAction in
            self.masterTextField.text = ""
            self.masterTextField.resignFirstResponder()
        }

        // Add the actions
        alertController.addAction(okAction)
        alertController.addAction(cancelAction)
        alertController.addAction(otherAction)

        // Present the controller
        self.present(alertController, animated: true, completion: nil)
        return false
    }

====Display activity indicator on api call Swift
func showLoader(view: UIView) -> UIActivityIndicatorView {

        //Customize as per your need
        let spinner = UIActivityIndicatorView(frame: CGRect(x: 0, y: 0, width: 40, height:40))
        spinner.backgroundColor = UIColor.black.withAlphaComponent(0.7)
        spinner.layer.cornerRadius = 3.0
        spinner.clipsToBounds = true
        spinner.hidesWhenStopped = true
        spinner.activityIndicatorViewStyle = UIActivityIndicatorViewStyle.white;
        spinner.center = view.center
        view.addSubview(spinner)
        spinner.startAnimating()
        UIApplication.shared.beginIgnoringInteractionEvents()

        return spinner
    }

And, For hide Activity Indicator

extension UIActivityIndicatorView {  
     func dismissLoader() {
            self.stopAnimating()
            UIApplication.shared.endIgnoringInteractionEvents()
        } 
 }

And, the UIViewController where you used Indicator as below.

    //Show
    let spinner = showLoader(view: self.view)

    //Hide
    spinner.dismissLoader()

====trung điểm giữa hai điểm toạ độ
let lon1 = listLocation[0].longitude * (.pi / 180)
        let lon2 = listLocation[1].longitude * (.pi / 180)
        let lat1 = listLocation[0].latitude * (.pi / 180)
        let lat2 = listLocation[1].latitude * (.pi / 180)
        let dLon = lon2 - lon1
        let x = cos(lat2) * cos(dLon)
        let y = cos(lat2) * sin(dLon)

        let lat3 = atan2( sin(lat1) + sin(lat2), sqrt((cos(lat1) + x) * (cos(lat1) + x) + y * y) )
        let lon3 = lon1 + atan2(y, cos(lat1) + x)

        let center: CLLocationCoordinate2D = CLLocationCoordinate2DMake(lat3 * 180 / .pi, lon3 * 180 / .pi)


==== layout table sizing

For Swift 4.2

In viewDidLoad() of your UIViewController:

NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(notification:)), name: UIResponder.keyboardWillShowNotification, object: nil)
NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(notification:)), name: UIResponder.keyboardWillHideNotification, object: nil)

And implementation of selectors:

@objc private func keyboardWillShow(notification: NSNotification) {
    if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
        tableView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: keyboardSize.height, right: 0)
    }
}

@objc private func keyboardWillHide(notification: NSNotification) {
    tableView.contentInset = .zero
}

====Comparable in generic
func checkSame<T: Comparable>(array: [T], item: T) -> Bool {
        for one in array {
            return one == item
        }
        return false
    }


====func chạy vào khi scroll
var lastContentOffset: CGFloat = 0
// Like @maddy said in the comment of your question, you can check if your UITableView is scrolling by using the UIScrollViewDelegate and further more you could check which direction it scrolls to by using both scrollViewDidScroll and scrollViewWillBeginDragging functions

    // we set a variable to hold the contentOffSet before scroll view scrolls
    

    // this delegate is called when the scrollView (i.e your UITableView) will start scrolling
    func scrollViewWillBeginDragging(_ scrollView: UIScrollView) {
        self.lastContentOffset = scrollView.contentOffset.y
    }

    // while scrolling this delegate is being called so you may now check which direction your scrollView is being scrolled to
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if self.lastContentOffset < scrollView.contentOffset.y {
            // did move up
            print("did move up")
        } else if self.lastContentOffset > scrollView.contentOffset.y {
            // did move down
            print("did move down")
        } else {
            // didn't move
            print("didn't move")
        }
    }

====Giới hạn level zoom google map
0

func mapView(_ mapView: GMSMapView, didChange position: GMSCameraPosition) {

    if position.zoom < 10 {

        let latitude = mapView.camera.target.latitude
        let longitude = mapView.camera.target.longitude

        let mapCamera = GMSCameraPosition.camera(withLatitude: latitude, longitude: longitude, zoom: 10)
        mapView.camera = mapCamera

    }
}


====
Lấy delegate trong base tableView Cell
if let delegate = self.delegate as? CommonScanSerialTableViewCellDelegate, let indexPath = self.indexPath {
            delegate.removeOldSerial(indexPath: indexPath)
}


====không cho người dùng thao tác với màn hình
self.view.isUserInteractionEnabled = false
====đổi màu button delete xoá cell khi kéo ngang
func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        let deleteButton = UITableViewRowAction(style: .default, title: "Delete") { (action, indexPath) in
            self.tableView.dataSource?.tableView!(self.tableView, commit: .delete, forRowAt: indexPath)
            return
        }
        deleteButton.backgroundColor = UIColor.black
        return [deleteButton]
    }



====Change keyboard type of a text field in Swift during runtime
textField.keyboardType = .numberPad
textField.reloadInputViews()

====http error
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
    <key>NSExceptionDomains</key>
    <dict>
        <key>example.com</key>
        <dict>
            <key>NSExceptionAllowsInsecureHTTPLoads</key>
            <true/>
            <key>NSIncludesSubdomains</key>
            <true/>
        </dict>
    </dict>
</dict>


====Giới hạn ký tự nhập vào textView và ẩn bàn phím khi nhấn phím return:
func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if (text == "\n") {
            dropdown.hide()
            textView.resignFirstResponder()
            return false
        }
        let newText = (textView.text as NSString).replacingCharacters(in: range, with: text)
        let numberOfChars = newText.count
        switch textView {
        case odfCode2TextView:
            return numberOfChars < 13
        default:
            return numberOfChars < 3
        }
    }
====Chiều cao tableView tự co giãn theo nội dung
@IBOutlet weak var heightTableView: NSLayoutConstraint!
set trong hamf cell for row at
self.heightTableView.constant = tableView.contentSize.height
====action khi chạm vào backround tableView
set trong hàm cell for row at
let tap = UITapGestureRecognizer(target: self, action: #selector(tableTapped))
        self.tableView.backgroundView = UIView()
        self.tableView.backgroundView?.addGestureRecognizer(tap)
----
action viết ngoài hàm cell for row at
@objc func tableTapped() {
	//do something
}

====đổ bóng cho view
searchView.layer.cornerRadius = 16
        searchView.layer.shadowColor = UIColor.black.cgColor
        searchView.layer.shadowOpacity = 0.8
        searchView.layer.shadowOffset = .zero
        searchView.layer.shadowRadius = 10

====Khoanh vùng trên map
    func showBreakPoint() {
        guard let latutide = infoBreakPoint.latitude, let longitude = infoBreakPoint.longitude, let radius = infoBreakPoint.radius else {
            return
        }
        let circle = GMSCircle()
        circle.radius = radius
        circle.fillColor = UIColor.red
        circle.position = CLLocationCoordinate2D(latitude: latutide, longitude: longitude)
        circle.strokeWidth = 5
        circle.strokeColor = UIColor.black
        circle.map = mapView
    }

====bound các toạ đô
var bounds = GMSCoordinateBounds()
            for location in coordinatesTemp {
                if let latitude = location.latitude, let longitude = location.longitude {
                    let position = CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
                    bounds = bounds.includingCoordinate(position)
                }
            }
            let update = GMSCameraUpdate.fit(bounds, withPadding: 100)
            mapView.animate(with: update)

// lưu ý  map: các isTapped = true/false nghĩa  là gì: nghĩa  là nếu == false, thì coi như tap vào coordinate. Còn == true là tap vào marker hoặc polyLine.

====
vị trí text trong textView
cableCodeTextView.textContainerInset = UIEdgeInsets(top: 8, left: 0, bottom: 8, right: 64)
====chạm vào polyline lấy ra toạ độ với sai số
if GMSGeometryIsLocationOnPathTolerance(coordinate, polyline.path!, true, 5) {
                self.mapView(mapView, didTap: polyline)
                markerPolyline(position: coordinate, title: polyline.title)
                break
            }
====UITextfield placeholder color and fontsize
let yourTextFieldName = UITextField(frame: CGRect(x: 0, y: 0, width: 180, height: 21))
yourTextFieldName.attributedPlaceholder = NSAttributedString(string: "placeholder text", attributes: [NSForegroundColorAttributeName: UIColor.white])
====chuyển màn trong appdelegate
public extension UIApplication {
    class func getTopViewController(base: UIViewController? = UIApplication.shared.keyWindow?.rootViewController) -> UIViewController? {

        if let nav = base as? UINavigationController {
            return getTopViewController(base: nav.visibleViewController)

        } else if let tab = base as? UITabBarController, let selected = tab.selectedViewController {
            return getTopViewController(base: selected)

        } else if let presented = base?.presentedViewController {
            return getTopViewController(base: presented)
        }
        return base
    }
}
dùng
let vc = UIStoryboard.init(name: "Main", bundle: nil).instantiateViewController(identifier: "TrungXoSoVC") as! TrungXoSoVC
UIApplication.getTopViewController()?.navigationController?.pushViewController(vc, animated: true)


====multi color UILabel (https://github.com/anoop4real/UILabelStyles)
extension NSMutableAttributedString {
    // If no text is send, then the style will be applied to full text
    func setColorForText(_ textToFind: String?, with color: UIColor) {
        
        let range:NSRange?
        if let text = textToFind{
            range = self.mutableString.range(of: text, options: .caseInsensitive)
        }else{
            range = NSMakeRange(0, self.length)
        }
        if range!.location != NSNotFound {
            addAttribute(NSAttributedString.Key.foregroundColor, value: color, range: range!)
        }
    }
}

Use:
    func setMultiColoredLabel() {
        let str = "Hoặc soạn DK gửi 9224 (9000đ/30 ngày)"
        let trimmedString = str.trimmingCharacters(in: .whitespacesAndNewlines)
        
        let string = NSMutableAttributedString(string: trimmedString)
        
        string.setColorForText("DK", with: #colorLiteral(red: 0.9254902005, green: 0.2352941185, blue: 0.1019607857, alpha: 1))
        string.setColorForText("9224", with: #colorLiteral(red: 0.9254902005, green: 0.2352941185, blue: 0.1019607857, alpha: 1))
        string.setColorForText("/", with: #colorLiteral(red: 0.2392156869, green: 0.6745098233, blue: 0.9686274529, alpha: 1))
        string.setColorForText("gửi", with: #colorLiteral(red: 0.3411764801, green: 0.6235294342, blue: 0.1686274558, alpha: 1))
        yourLabel.attributedText = string
    }



//MARK: Kéo ảnh quanh màn hình
1. Tạo ảnh bằng code hoặc kéo outlet
	    func createImage(number: Int) {
        let lightBulb = UIImageView(frame: CGRect(x: 100, y: 100, width: 50, height: 50))
        var name: String = "lightBulb"
        if number % 2 == 0 {
            name = "sochan"
        }
        lightBulb.image = UIImage(named: name)
        lightBulb.contentMode = .scaleToFill
	//đây là gán action kéo
        lightBulb.isUserInteractionEnabled = true
        lightBulb.addGestureRecognizer(UIPanGestureRecognizer(target: self, action: #selector(handlePan(recognizer:))))
        self.view.addSubview(lightBulb)
    }

tạo action cho phần kéo
	@objc func handlePan(recognizer: UIPanGestureRecognizer) {
        
        let translation = recognizer.translation(in: self.view)
        if let view = recognizer.view {
            view.center = CGPoint(x:view.center.x + translation.x,
                                  y:view.center.y + translation.y)
        }
        
        recognizer.setTranslation(.zero, in: self.view)
    }




MARK: ENUM
enum ChooseColor {
    case blue
    case red
    case purple
    case yellow
    
    static let all = [blue, red, purple, yellow]
    
    var value: UIColor {
        get {
            switch self {
            case .blue:
                return .blue
            case .red:
                return .red
            case .purple:
                return .purple
            case .yellow:
                return .yellow
            }
        }
    }
}

====search co dau khong phan biet
func filteringNames(key: String) {
        if key == "" {
            resultSearch = listNames
        } else {
            resultSearch = listNames.filter { (name: String) in
                let textName = name.lowercased()
                let keyText = key.lowercased()
                if textName.unaccent().range(of: keyText.unaccent()) != nil {
                    return true
                }
                return false
            }
        }
        tableView.reloadData()
    }
extension String {
    func unaccent() -> String {
        return self.folding(options: .diacriticInsensitive, locale: .current)
    }
}
====






